<main class="games-section container">
  {{#if error}}
  <div id="top-error" class="alert alert-danger error-msg">{{error}}</div>
  {{/if}}

  {{#if success}}
  <div class="alert" class="alert-success success-msg">{{success}}</div>
  {{/if}}
  <!-- Tabs Section -->
  <div class="game-tabs">
    <button class="tab-button" onclick="showSection('calendar')">Calendar</button>
    <button class="tab-button active" onclick="showSection('mySports')">My Sports</button>
  </div>

  <!-- Calendar Section -->
  <section id="calendar" class="tab-content" style="display: none;">
    <div id="calendar-container">
      <div id="calendar"></div>
    </div>
  </section>

  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet" />

  <div id="game-map" style="height: 400px; margin-bottom: 20px;"></div>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const mapContainer = document.getElementById('game-map');
      if (!mapContainer) return;

      // Default coordinates: NYC
      let defaultLat = 40.7128;
      let defaultLng = -74.0060;
      const cookieMatch = document.cookie.match(/user_location=([^;]+)/);
      if (cookieMatch) {
        try {
          const loc = JSON.parse(decodeURIComponent(cookieMatch[1]));
          if (loc.lat && loc.lng) {
            defaultLat = loc.lat;
            defaultLng = loc.lng;
          }
        } catch (e) {
          console.warn('Could not parse location cookie');
        }
      }

      const map = L.map('game-map').setView([defaultLat, defaultLng], 12);

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Â© OpenStreetMap contributors'
      }).addTo(map);

      // Games are passed in via Handlebars
const games = {{{json allGames}}};

    games.forEach(game => {
      if (game.geoLocation && game.geoLocation.coordinates) {
        const [lng, lat] = game.geoLocation.coordinates;
        L.marker([lat, lng]).addTo(map)
          .bindPopup(`<strong>${game.title}</strong><br>${game.sport}<br><a href="/join/${game._id}">View Game</a>`);
      }
    });
    });
  </script>

  <!-- Filter Sidebar -->
<aside class="filter-sidebar">
  <form id="filter-form" action="/join/filter" method="get">
    <h4>Filter Games</h4>

    <!-- Sport -->
    <label for="sport">Sport:</label>
    <select name="sport" id="sport">
      <option value="">-- Select --</option>
      <option value="Soccer">Soccer</option>
      <option value="Basketball">Basketball</option>
      <option value="Baseball">Baseball</option>
      <option value="Tennis">Tennis</option>
      <option value="Swimming">Swimming</option>
      <option value="Running">Running</option>
      <option value="Cycling">Cycling</option>
      <option value="Hiking">Hiking</option>
      <option value="Golf">Golf</option>
      <option value="Volleyball">Volleyball</option>
    </select>

    <!-- Date -->
    <label for="date">Date:</label>
    <select name="date" id="date">
      <option value="">-- Any --</option>
      <option value="today">Today</option>
      <option value="1+">Coming in 1+ days</option>
      <option value="2+">Coming in 2+ days</option>
    </select>

    <!-- Players Left -->
    <label for="playersLeft">Players Left:</label>
    <select name="playersLeft" id="playersLeft">
      <option value="">-- Any --</option>
      {{#each (range 1 10)}}
        <option value="{{this}}">{{this}}+</option>
      {{/each}}
    </select>

    <!-- Skill Level -->
    <label for="skillLevel">Skill Level:</label>
    <select name="skillLevel" id="skillLevel">
      <option value="">-- Any --</option>
      <option value="Beginner">Beginner</option>
      <option value="Intermediate">Intermediate</option>
      <option value="Advanced">Advanced</option>
    </select>

    <!-- Min Players -->
    <label for="minPlayers">Min Players Required:</label>
    <input type="number" name="minPlayers" id="minPlayers" min="1" />

    <!-- Max Cost -->
    <label for="maxCost">Max Cost Per Head ($):</label>
    <input type="number" name="maxCost" id="maxCost" min="0" />

    <!-- City -->
    <label for="city">City:</label>
    <input type="text" name="city" id="city" placeholder="e.g., Jersey City" />

    {{#if isLoggedIn}}
      <!-- Friends -->
      <label>
        <input type="checkbox" name="friendsOnly" value="true" />
        Games hosted by friends
      </label>
    {{/if}}

    <button type="submit" class="btn btn-primary">Apply Filters</button>
    <button type="button" id="resetFilters" class="btn btn-secondary">Reset Filters</button>
  </form>
</aside>

  <!-- My Sports Section (default visible) -->
  <section id="mySports" class="tab-content" style="display: block;">
    <section>
      <h2 class="section-heading">Recommended Games</h2>
      {{#if recommendedGames.length}}
      <div class="game-grid">
        {{#each recommendedGames}}
        <div class="game-card">
          <a href="/join/{{this._id}}">
            <h3>{{this.title}}</h3>
            <p>Sport: {{this.sport}}</p>
            <p>Location: {{this.location}}</p>
            <p>
              Date: {{formatDate this.startTime}} |
              Time: {{formatTime this.startTime}} - {{formatTime this.endTime}}
            </p>
          </a>
        </div>
        {{/each}}
      </div>
      {{else}}
      <div class="no-match-box">
        <p class="no-match">Oops...No Match Found for this Selection Criteria</p>
        <p>You can host an activity & we will shout-out to the community to join in :)</p>
        <a href="/host/form" class="btn btn-success">Create Game</a>
      </div>
      {{/if}}
    </section>

    <!-- All Games -->
    <section>
      <h2 class="section-heading">All Games</h2>
      <div id="all-games-container" class="game-grid">
          {{#each allGames}}
          <div class="game-card">
            <a href="/join/{{this._id}}">
              <h3>{{this.title}}</h3>
              <p>Sport: {{this.sport}}</p>
              <p>Location: {{this.location}}</p>
              <p>
                Date: {{formatDate this.startTime}} |
                Time: {{formatTime this.startTime}} - {{formatTime this.endTime}}
              </p>
              {{#if this.host.username}}
              <p>Hosted By: {{this.host.username}}</p>
              {{/if}}
            </a>

            {{#if (eq ../hostId this.host._id)}}
            <!-- Host: Edit/Delete buttons -->
            <a href="/host/edit/{{this._id}}" class="btn btn-warning">Edit</a>
            <form action="/host/delete/{{this._id}}" method="POST" style="display:inline;"
              onsubmit="return confirm('Are you sure you want to delete this game?')">
              <button type="submit" class="btn btn-danger">Delete</button>
            </form>
            {{else}}
            {{#if (includes ../joinedGameIdStrings (toString this._id))}}
            <!-- Already joined -->
            <form action="/join/leave/{{this._id}}" method="POST">
              <button type="submit" class="btn btn-secondary">Leave</button>
            </form>
            {{else if (gte (length this.players) this.playersRequired)}}
            <!-- Session full and not joined -->
            <p class="full-session">ðŸš« Session is Full</p>
            {{/if}}
            {{/if}}
          </div>
          {{/each}}
        </div>
    </section>
  </section>


  <!-- JS Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
  <script>
    function showSection(sectionId) {
      const sections = document.querySelectorAll('.tab-content');
      sections.forEach(sec => sec.style.display = 'none');

      const buttons = document.querySelectorAll('.tab-button');
      buttons.forEach(btn => btn.classList.remove('active'));

      const activeTab = document.getElementById(sectionId);
      activeTab.style.display = 'block';
      event.target.classList.add('active');

      if (sectionId === 'calendar' && window._myCalendarInstance) {
        setTimeout(() => {
          window._myCalendarInstance.render();
        }, 10);
      }
    }

    document.addEventListener("DOMContentLoaded", function () {
      const calendarEl = document.getElementById("calendar");

      const calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: "dayGridMonth",
        height: "auto",
        headerToolbar: {
          left: "prev,today,next",
          center: "title",
          right: "dayGridMonth,timeGridWeek,timeGridDay"
        },
        events: {{{ json calendarEvents }}}
  });

    calendar.render();

    window._myCalendarInstance = calendar;
});

    document.addEventListener('DOMContentLoaded', function () {
      const topError = document.getElementById('top-error');
      if (topError) {
        setTimeout(() => {
          topError.style.display = 'none';
        }, 5000);
      }
    });
  </script>

<script>
  document.getElementById("filter-form").addEventListener("submit", async function (e) {
    e.preventDefault();

    const form = e.target;
    const formData = new FormData(form);
    const params = new URLSearchParams(formData).toString();
    console.log("Fetching with:", `/join/filter?${params}`);

    try {
      const response = await fetch(`/join/filter?${params}`);
      if (!response.ok) throw new Error("Network response was not ok");

      const data = await response.json();
      const allGamesContainer = document.querySelector("#all-games-container");

      allGamesContainer.innerHTML = "";

      data.games.forEach((game) => {
        const card = document.createElement("div");
        card.classList.add("game-card");

        card.innerHTML = `
          <a href="/join/${game._id}">
            <h3>${game.title}</h3>
            <p>Sport: ${game.sport}</p>
            <p>Location: ${game.location}</p>
            <p>
              Date: ${new Date(game.startTime).toLocaleDateString()} |
              Time: ${new Date(game.startTime).toLocaleTimeString()} - ${new Date(game.endTime).toLocaleTimeString()}
            </p>
          </a>
        `;
        allGamesContainer.appendChild(card);
      });
    } catch (err) {
      console.error(err);
      alert("Something went wrong while filtering games.");
    }
  });
  document.getElementById("resetFilters").addEventListener("click", async function () {
    const form = document.getElementById("filter-form");
    form.reset(); // Clears all fields

    try {
      const response = await fetch(`/join/filter`);
      const data = await response.json();
      const allGamesContainer = document.querySelector("#all-games-container");
      allGamesContainer.innerHTML = "";

      data.games.forEach((game) => {
        const card = document.createElement("div");
        card.classList.add("game-card");
        card.innerHTML = `
          <a href="/join/${game._id}">
            <h3>${game.title}</h3>
            <p>Sport: ${game.sport}</p>
            <p>Location: ${game.location}</p>
            <p>
              Date: ${new Date(game.startTime).toLocaleDateString()} |
              Time: ${new Date(game.startTime).toLocaleTimeString()} - ${new Date(game.endTime).toLocaleTimeString()}
            </p>
          </a>
        `;
        allGamesContainer.appendChild(card);
      });
    } catch (err) {
      console.error(err);
      alert("Something went wrong while resetting filters.");
    }
  });
</script>



</main>