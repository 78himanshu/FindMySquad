<div class="container my-5 pb-5">
    <h2 class="text-center mb-4">Complete Your Profile</h2>

    <form id="profileForm" class="mx-auto" method="POST" action="/profile/addprofile"
        style="width: auto; max-width: none;">
        <!-- First & Last Name -->
        <div class="row mb-3 g-3">
            <div class="col-md-4">
                <label for="firstName" class="form-label">First Name *</label>
                <input type="text" name="firstName" id="firstName" class="form-control" placeholder="First Name"
                    value="{{formData.firstName}}">
            </div>
            <div class="col-md-4">
                <label for="lastName" class="form-label">Last Name *</label>
                <input type="text" name="lastName" id="lastName" class="form-control" placeholder="Last Name"
                    value="{{formData.lastName}}">
            </div>
            <div class="col-md-4">
                <label for="gender" class="form-label">Gender *</label>
                <select class="form-select" name="gender" id="gender">
                    <option value="" disabled selected>Select Gender</option>
                    <option value="Male" {{#if (eq formData.gender "Male" )}}selected{{/if}}>Male</option>
                    <option value="Female" {{#if (eq formData.gender "Female" )}}selected{{/if}}>Female</option>
                    <option value="Other" {{#if (eq formData.gender "Other" )}}selected{{/if}}>Other</option>
                </select>
            </div>
        </div>

        <!-- Profile Pic Radio -->
        <label>Select a Profile Pic *</label>
        <div class="d-flex gap-3">
            <label>
                <input type="radio" name="profilePic" value="/images/profile1.PNG" hidden {{#if (eq
                    formData.profilePic "/images/profile1.PNG" )}}checked{{/if}}>
                <img src="/images/profile1.PNG" class="img-thumbnail profile-option {{#if (eq formData.profilePic "
                    /images/profile1.PNG")}}selected{{/if}}" width="60" alt="Profile option: avatar 1">
            </label>
            <label>
                <input type="radio" name="profilePic" value="/images/profile2.jpg" hidden {{#if (eq
                    formData.profilePic "/images/profile2.jpg" )}}checked{{/if}}>
                <img src="/images/profile2.jpg" class="img-thumbnail profile-option  {{#if (eq formData.profilePic "
                    /images/profile2.jpg")}}selected{{/if}}" width="60" alt="Profile option: avatar 2">
            </label>
            <label>
                <input type="radio" name="profilePic" value="/images/profile3.jpg" hidden {{#if (eq
                    formData.profilePic "/images/profile3.jpg" )}}checked{{/if}}>
                <img src="/images/profile3.jpg" class="img-thumbnail profile-option {{#if (eq formData.profilePic "
                    /images/profile3.jpg")}}selected{{/if}}" width="60" alt="Profile option: avatar 3">
            </label>
            <label>
                <input type="radio" name="profilePic" value="/images/profile4.jpg" hidden {{#if (eq
                    formData.profilePic "/images/profile4.jpg" )}}checked{{/if}}>
                <img src="/images/profile4.jpg" class="img-thumbnail profile-option{{#if (eq formData.profilePic "
                    /images/profile4.jpg")}}selected{{/if}}" width="60" alt="Profile option: avatar 4">
            </label>
        </div>

        <!-- Location and phone number -->
        <div class="row mt-4">
            <div class="col-md-6">
                <label for="city" class="form-label">City *</label>
                <input type="text" id="city" name="city" class="form-control" placeholder="Enter your city"
                    value="{{formData.city}}">
            </div>
            <div class="col-md-6">
                <label for="phoneNumber" class="form-label">Phone Number <span class="text-danger">*</span></label>
                <input type="tel" id="phoneNumber" name="phoneNumber" class="form-control"
                    placeholder="Enter a valid phone number" value="{{formData.phoneNumber}}">
                <div id="phoneError" class="form-text text-danger"></div>
                <small class="form-text text-muted">Format: 123-456-7890</small>

            </div>
        </div>

        <!-- Bio -->
        <textarea name="bio" id="bio" class="form-control mt-3"
            placeholder="Tell us about yourself...">{{formData.bio}}</textarea>

        <!-- Sports Checkboxes -->
        <label class="mt-4">Select Sports: *</label>
        <div class="row row-cols-2 row-cols-md-4 g-2 mt-2" id="sportsList">
            {{#each sportsList}}
            <div class="col text-center">
                <label
                    class="btn btn-outline-success w-100 {{#if (includes ../formData.sportsInterests this)}}active{{/if}}">
                    <input type="checkbox" name="sportsInterests" value="{{this}}" class="d-none" {{#if (includes
                        ../formData.sportsInterests this)}}checked{{/if}}>
                    {{this}}
                </label>
            </div>
            {{/each}}
        </div>

        <div class="mt-5">
            <label class="form-label d-block mb-2">Select Workout Types:</label>
            <div class="row row-cols-2 row-cols-md-4 g-2 mt-2" id="workoutList">
                {{#each workoutTypes}}
                <div class="col text-center">
                    <label
                        class="btn btn-outline-success w-100 {{#if (includes ../formData.workoutTypes this)}}active{{/if}}">
                        <input type="checkbox" name="workoutTypes" value="{{this}}" class="d-none" {{#if (includes
                            ../formData.workoutTypes this)}}checked{{/if}}> {{this}}
                    </label>
                </div>
                {{/each}}
            </div>
        </div>

        <div class="mt-5">
            <label class="form-label d-block mb-2">Select Your Gaming
                Interests: </label>
            <div class="row row-cols-2 row-cols-md-4 g-2 mt-2" id="gamingList">
                {{#each gamingOptions}}
                <div class="col text-center">
                    <label
                        class="btn btn-outline-success w-100 {{#if (includes ../formData.gamingOptions this)}}active{{/if}}">
                        <input type="checkbox" name="gamingOptions" value="{{this}}" class="d-none" {{#if (includes
                            ../formData.gamingOptions this)}}checked{{/if}}>
                        {{this}}
                    </label>
                </div>
                {{/each}}
            </div>
        </div>
        <div class="form-check mt-3">
            <input class="form-check-input" type="checkbox" id="showContactInfo" name="showContactInfo" {{#if
                formData.showContactInfo}}checked{{/if}}>
            <label class="form-check-label" for="showContactInfo">
                Show contact information on your profile
            </label>
        </div>
        <button type="submit" class="btn btn-primary mt-4">Save Profile</button>
    </form>
</div>


<script src="/js/main.js"></script>
<script>
    const allowedSports = new Set(["Soccer", "Basketball", "Baseball", "Tennis", "Swimming", "Running", "Cycling", "Hiking", "Golf", "Volleyball"]);
    const allowedWorkouts = new Set(["Cardio", "Weight Training", "CrossFit", "Yoga", "HIIT", "Pilates", "Zumba", "Bodyweight"]);
    const allowedGames = new Set(["FPS (e.g., Call of Duty)", "Battle Royale (e.g., Fortnite)", "MOBA (e.g., Dota 2)", "Sports (e.g., FIFA)", "Racing (e.g., Forza)", "Simulation (e.g., Sims)", "RPG (e.g., Elden Ring)", "MMORPG", "Strategy", "Puzzle"]);

    document.addEventListener('DOMContentLoaded', () => {
        const profilePics = document.querySelectorAll('input[name="profilePic"]');
        const profileImages = document.querySelectorAll('.profile-option');

        profilePics.forEach((radio, index) => {
            radio.addEventListener('change', () => {
                profileImages.forEach((img) => img.classList.remove('selected'));
                profileImages[index].classList.add('selected');
            });
        });
    });


    const selectedRadio = document.querySelector('input[name="profilePic"]:checked');
    if (selectedRadio) {
        selectedRadio.nextElementSibling.classList.add('selected');
    }

    document.addEventListener('DOMContentLoaded', () => {
        const toggleLabels = document.querySelectorAll('label.btn input[type="checkbox"]');

        toggleLabels.forEach((input) => {
            const label = input.closest('label');

            label.addEventListener('click', (e) => {
                e.preventDefault();
                input.checked = !input.checked;
                label.classList.toggle('active', input.checked);
            });

            if (input.checked) {
                label.classList.add('active');
            }
        });
    });

    function showToast(message, isSuccess = false) {
        const toast = document.getElementById('toastMsg');
        const toastBody = document.getElementById('toastBody');

        // Set message and color
        toastBody.textContent = message;
        toast.classList.remove('bg-danger', 'bg-success');
        toast.classList.add(isSuccess ? 'bg-success' : 'bg-danger');

        // Show toast
        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toast);
        toastBootstrap.show();
    }



    const form = document.getElementById('profileForm');

    form.onsubmit = async function (e) {
        e.preventDefault();

        // Clear any previous error
        const existingError = document.getElementById('formError');
        if (existingError) existingError.remove();

        const showError = (msg) => {
            const errorDiv = document.createElement('div');
            errorDiv.id = 'formError';
            errorDiv.className = 'alert alert-danger mt-3';
            errorDiv.textContent = msg;
            form.prepend(errorDiv);
        };

        // Gather form data
        const firstName = form.firstName.value.trim();
        const lastName = form.lastName.value.trim();
        const gender = form.gender.value;
        const profilePic = form.querySelector('input[name="profilePic"]:checked');
        const sports = Array.from(form.querySelectorAll('input[name="sportsInterests"]:checked')).map(i => i.value);
        const workouts = Array.from(form.querySelectorAll('input[name="workoutTypes"]:checked')).map(i => i.value);
        const games = Array.from(form.querySelectorAll('input[name="gamingOptions"]:checked')).map(i => i.value);
        const bio = form.bio.value.trim();

        // Validate required fields
        if (!firstName || !lastName) return showToast('First and Last name are required.');
        if (!profilePic) return showToast('Please select a profile picture.');
        if (sports.length === 0) return showToast('Please select at least one sport.');
        const nameRegex = /^[A-Za-z]{1,50}$/;
        if (!nameRegex.test(firstName)) return showToast('First name must be 1-50 letters only.');
        if (!nameRegex.test(lastName)) return showToast('Last name must be 1-50 letters only.');
        if (bio.length > 300) return showToast('Bio must be under 300 characters.');
        const allowedGenders = new Set(["Male", "Female", "Other"]);
        if (!allowedGenders.has(gender)) return showToast('Please select a valid gender.');
        if (sports.length === 0 || !sports.every(s => allowedSports.has(s)))
            return showToast("Please select valid sports from the list.");

        if (workouts.length > 0 && !workouts.every(w => allowedWorkouts.has(w)))
            return showToast("Please select valid workout types from the list.");

        if (games.length > 0 && !games.every(g => allowedGames.has(g)))
            return showToast("Please select valid gaming interests from the list.");

        const city = form.city.value.trim();
        const phoneNumber = form.phoneNumber.value.trim();

        if (!city) return showToast('Please enter your city.');
        if (!phoneNumber) return showToast('Phone number is required.');

        const phonePattern = /^(\+?1\s?)?(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/;
        if (!phonePattern.test(phoneNumber)) {
            return showToast('Please enter a valid phone number (e.g., 123-456-7890)');
        }

        // Prepare and send the data
        const profileData = {
            firstName,
            lastName,
            gender,
            profilePic: profilePic.value,
            bio,
            sportsInterests: sports,
            gymPreferences: workouts,
            gamingInterests: games,
            city,
            phoneNumber,
            showContactInfo: form.showContactInfo?.checked || false,
            //geoLocation
        };

        try {
            const res = await fetch('/profile', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(profileData)
            });

            const result = await res.json();
            console.log("result hbd", result);
            if (res.ok) {
                showToast('Profile saved successfully!', true);
                setTimeout(() => window.location.href = '/', 1500);
            } else {
                showToast(result.error || 'Something went wrong.', false);
            }

        } catch (err) {
            console.error(err);
            showError('Server error occurred.');
        }
    };

</script>

<script
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBP-FJZsXytqUxzesnIEkrkUu4JoB1zO-M&libraries=places&callback=initAutocomplete"
    async defer></script>

<script>
    function initAutocomplete() {
        const input = document.getElementById('city');
        new google.maps.places.Autocomplete(input, {
            types: ['(cities)']
        });
    }
</script>